//////////////////////////////////////////////////////////////////////////////////////
//  Raylib.h
//////////////////////////////////////////////////////////////////////////////////////

PI :: 3.14159265358979323846;

Color :: struct {
    r: u8;
    g: u8;
    b: u8;
    a: u8;
}

Rectangle :: struct {
    x: float;
    y: float;
    width: float;
    height: float;
}

Vector2 :: struct {
    x: float;
    y: float;
}

// Image, pixel data stored in CPU memory (RAM)
Image :: struct {
    data: *void;             // Image raw data
    width: int;              // Image base width
    height: int;             // Image base height
    mipmaps: int;            // Mipmap levels, 1 by default
    format: int;             // Data format (PixelFormat type)
}

// Texture, tex data stored in GPU memory (VRAM)
Texture :: struct {
    id:      uint;        // OpenGL texture id
    width:   int;         // Texture base width
    height:  int;         // Texture base height
    mipmaps: int;         // Mipmap levels, 1 by default
    format:  int;         // Data format (PixelFormat type)
}

KeyboardKey :: enum {
    NULL            = 0,        // Key: NULL, used for no key pressed
    // Alphanumeric keys
    APOSTROPHE      = 39,       // Key: '
    COMMA           = 44,       // Key: ,
    MINUS           = 45,       // Key: -
    PERIOD          = 46,       // Key: .
    SLASH           = 47,       // Key: /
    ZERO            = 48,       // Key: 0
    ONE             = 49,       // Key: 1
    TWO             = 50,       // Key: 2
    THREE           = 51,       // Key: 3
    FOUR            = 52,       // Key: 4
    FIVE            = 53,       // Key: 5
    SIX             = 54,       // Key: 6
    SEVEN           = 55,       // Key: 7
    EIGHT           = 56,       // Key: 8
    NINE            = 57,       // Key: 9
    SEMICOLON       = 59,       // Key: ;
    EQUAL           = 61,       // Key: =
    A               = 65,       // Key: A | a
    B               = 66,       // Key: B | b
    C               = 67,       // Key: C | c
    D               = 68,       // Key: D | d
    E               = 69,       // Key: E | e
    F               = 70,       // Key: F | f
    G               = 71,       // Key: G | g
    H               = 72,       // Key: H | h
    I               = 73,       // Key: I | i
    J               = 74,       // Key: J | j
    K               = 75,       // Key: K | k
    L               = 76,       // Key: L | l
    M               = 77,       // Key: M | m
    N               = 78,       // Key: N | n
    O               = 79,       // Key: O | o
    P               = 80,       // Key: P | p
    Q               = 81,       // Key: Q | q
    R               = 82,       // Key: R | r
    S               = 83,       // Key: S | s
    T               = 84,       // Key: T | t
    U               = 85,       // Key: U | u
    V               = 86,       // Key: V | v
    W               = 87,       // Key: W | w
    X               = 88,       // Key: X | x
    Y               = 89,       // Key: Y | y
    Z               = 90,       // Key: Z | z
    LEFT_BRACKET    = 91,       // Key: [
    BACKSLASH       = 92,       // Key: '\'
    RIGHT_BRACKET   = 93,       // Key: ]
    GRAVE           = 96,       // Key: `
    // Function keys
    SPACE           = 32,       // Key: Space
    ESCAPE          = 256,      // Key: Esc
    ENTER           = 257,      // Key: Enter
    TAB             = 258,      // Key: Tab
    BACKSPACE       = 259,      // Key: Backspace
    INSERT          = 260,      // Key: Ins
    DELETE          = 261,      // Key: Del
    RIGHT           = 262,      // Key: Cursor right
    LEFT            = 263,      // Key: Cursor left
    DOWN            = 264,      // Key: Cursor down
    UP              = 265,      // Key: Cursor up
    PAGE_UP         = 266,      // Key: Page up
    PAGE_DOWN       = 267,      // Key: Page down
    HOME            = 268,      // Key: Home
    END             = 269,      // Key: End
    CAPS_LOCK       = 280,      // Key: Caps lock
    SCROLL_LOCK     = 281,      // Key: Scroll down
    NUM_LOCK        = 282,      // Key: Num lock
    PRINT_SCREEN    = 283,      // Key: Print screen
    PAUSE           = 284,      // Key: Pause
    F1              = 290,      // Key: F1
    F2              = 291,      // Key: F2
    F3              = 292,      // Key: F3
    F4              = 293,      // Key: F4
    F5              = 294,      // Key: F5
    F6              = 295,      // Key: F6
    F7              = 296,      // Key: F7
    F8              = 297,      // Key: F8
    F9              = 298,      // Key: F9
    F10             = 299,      // Key: F10
    F11             = 300,      // Key: F11
    F12             = 301,      // Key: F12
    LEFT_SHIFT      = 340,      // Key: Shift left
    LEFT_CONTROL    = 341,      // Key: Control left
    LEFT_ALT        = 342,      // Key: Alt left
    LEFT_SUPER      = 343,      // Key: Super left
    RIGHT_SHIFT     = 344,      // Key: Shift right
    RIGHT_CONTROL   = 345,      // Key: Control right
    RIGHT_ALT       = 346,      // Key: Alt right
    RIGHT_SUPER     = 347,      // Key: Super right
    KB_MENU         = 348,      // Key: KB menu
    // Keypad keys
    KP_0            = 320,      // Key: Keypad 0
    KP_1            = 321,      // Key: Keypad 1
    KP_2            = 322,      // Key: Keypad 2
    KP_3            = 323,      // Key: Keypad 3
    KP_4            = 324,      // Key: Keypad 4
    KP_5            = 325,      // Key: Keypad 5
    KP_6            = 326,      // Key: Keypad 6
    KP_7            = 327,      // Key: Keypad 7
    KP_8            = 328,      // Key: Keypad 8
    KP_9            = 329,      // Key: Keypad 9
    KP_DECIMAL      = 330,      // Key: Keypad .
    KP_DIVIDE       = 331,      // Key: Keypad /
    KP_MULTIPLY     = 332,      // Key: Keypad *
    KP_SUBTRACT     = 333,      // Key: Keypad -
    KP_ADD          = 334,      // Key: Keypad +
    KP_ENTER        = 335,      // Key: Keypad Enter
    KP_EQUAL        = 336,      // Key: Keypad =
}

// Image loading functions
// NOTE: These functions do not require GPU access
LoadImage :: (fileName: string) -> Image #extern "C"

// Texture loading functions
// NOTE: These functions require GPU access
LoadTexture          :: (fileName: string) -> Texture #extern "C"
UnloadTexture        :: (texture: Texture) #extern "C"
LoadTextureFromImage :: (image: Image) -> Texture #extern "C"

// Window-related functions
InitWindow        :: (width: int, height: int, title: string) #extern "C"
CloseWindow       :: () #extern "C"
WindowShouldClose :: () -> bool #extern "C"
BeginDrawing      :: () #extern "C"
EndDrawing        :: () #extern "C"
ClearBackground   :: (color: Color) #extern "C"

// Drawing functions
DrawFPS  :: (posX: int, posY: int) #extern "C"                                                  // Draw current FPS
DrawText :: (text: string, posX: int, posY: int, fontSize: int, color: Color) #extern "C"       // Draw text (using default font)
// DrawTextEx :: (Font font, const char *text, Vector2 position, float fontSize, float spacing, Color tint); // Draw text using font and additional parameters
// DrawTextPro :: (Font font, const char *text, Vector2 position, Vector2 origin, float rotation, float fontSize, float spacing, Color tint); // Draw text using Font and pro parameters (rotation)
// DrawTextCodepoint :: (Font font, int codepoint, Vector2 position, float fontSize, Color tint); // Draw one character (codepoint)
// DrawTextCodepoints :: (Font font, const int *codepoints, int count, Vector2 position, float fontSize, float spacing, Color tint); // Draw multiple character (codepoint)
DrawTexture :: (texture: Texture, posX: int, posY: int, tint: Color) #extern "C"

// Basic shapes drawing functions
DrawCircle           :: (centerX: int, centerY: int, radius: float, color: Color) #extern "C"
DrawRectangle        :: (posX: int, posY: int, width: int, height: int, color: Color) #extern "C"
DrawRectangleRec     :: (rec: Rectangle, color: Color) #extern "C"
DrawRectangleLines   :: (posX: int, posY: int, width: int, height: int, color: Color) #extern "C"
DrawRectangleLinesEx :: (rec: Rectangle, lineThick: float, color: Color) #extern "C"

// Basic shapes collision detection functions
CheckCollisionRecs :: (rec1: Rectangle, rec2: Rectangle) -> bool #extern "C"                                           // Check collision between two rectangles

// Text font info functions
MeasureText :: (text: string, fontSize: int) -> int #extern "C"

// Timing-related functions
SetTargetFPS :: (fps: int) #extern "C"
GetFrameTime :: () -> f32 #extern "C"
GetTime      :: () -> f64 #extern "C"

// Input-related functions: keyboard
IsKeyPressed  :: (key: KeyboardKey) -> bool #extern "C"
IsKeyDown     :: (key: KeyboardKey) -> bool #extern "C"
GetKeyPressed :: () -> KeyboardKey #extern "C"
GetMousePosition :: () -> Vector2 #extern "C"

// Files management functions
GetWorkingDirectory :: () -> string #extern "C"

// Misc. functions
GetRandomValue :: (min: int, max: int) -> int #extern "C"

//////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////
//  C math.h functions
//////////////////////////////////////////////////////////////////////////////////////
round :: (value: f64) -> f64 #extern "C"
sin   :: (angle: f64) -> f64 #extern "C"
cos   :: (angle: f64) -> f64 #extern "C"
sqrt  :: (value: f64) -> f64 #extern "C"

//////////////////////////////////////////////////////////////////////////////////////
//  C stdlib functions
//////////////////////////////////////////////////////////////////////////////////////
sprintf :: (str: *u8, format: *u8, arg0: int) -> int #extern "C"






//////////////////////////////////////////////////////////////////////////////////////




BALL_SIZE :: 16;
BRICK_WIDTH  :: 80;
BRICK_HEIGHT :: 20;
BRICK_PADDING :: 15;
BRICK_ROWS :: 8;
BRICK_COLS :: 11;
BAR_START_WIDTH :: 100;
PICKUP_SPAWN_CHANCE :: 15; // in percentage
PICKUP_SIZE :: 26;

TOP_MARGIN :: 80;
WINDOW_WIDTH :: 1200;
WINDOW_HEIGHT :: 800;




Brick :: struct {
    x:     int;
    y:     int;
    color: Color;
    dead:  bool;
}

Bar :: struct {
    x:      float;
    y:      float;
    width:  float;
    height: float;
}

Ball :: struct {
    x:      float;
    y:      float;
    size:   float;
    vel_x:  float;
    vel_y:  float;
}

Player :: struct {
    score: int;
    lives: int;
}

PickupType :: enum {
    BALL_SPEED_UP,
    BALL_SLOW_DOWN,
    BAR_WIDEN,
    BAR_SHORTEN,
    FIREBALL,
    COUNT,
}

Pickup :: struct {
    type: PickupType;
    x: float;
    y: float;
    vel_y: float;
    is_shown: bool;
}

PickupSpawner :: struct {
    pickups: []Pickup;
    free_index: int;
}





main :: () {

    COLOR_WHITE := Color{255, 255, 255, 255};

    InitWindow(WINDOW_WIDTH, WINDOW_HEIGHT, "Super Breakout");
    SetTargetFPS(90);

    game_title := "Super Breakout";
    game_title_len := MeasureText(game_title, 24);

    //
    // Textxures
    //
    heart_texture := LoadTexture("data/textures/heart.png");
    heart_texture.width  = 24;
    heart_texture.height = 24;


    pickup_textures : [PickupType.COUNT]Texture = [
        LoadTexture("data/textures/pickups/ball_speed_up.png"),
        LoadTexture("data/textures/pickups/ball_slow_down.png"),
        LoadTexture("data/textures/pickups/bar_widen.png"),
        LoadTexture("data/textures/pickups/bar_shorten.png"),
        LoadTexture("data/textures/pickups/fire_ball.png"),
    ];

    // Scale each pickup texture
    for 0..pickup_textures.count {
        texture := &pickup_textures[it];
        texture.width  = PICKUP_SIZE;
        texture.height = PICKUP_SIZE;
    }

    ball := Ball{
        x = WINDOW_WIDTH * 0.5,
        y = WINDOW_HEIGHT * 0.5,
        size = BALL_SIZE,
        vel_x = 550.0,
        vel_y = 550.0,
    };

    bar := Bar{
        x = WINDOW_WIDTH * 0.5 - BAR_START_WIDTH * 0.5,
        y = WINDOW_HEIGHT - 70,
        width = BAR_START_WIDTH,
        height = 15,
    };

    player := Player{
        score = 0,
        lives = 3,
    };

    dead_zone := Rectangle{0, bar.y + bar.height, xx WINDOW_WIDTH, WINDOW_HEIGHT - bar.y - bar.height};

    score_text: [16]u8;

    brick_colors: [BRICK_ROWS]Color = [
        {195, 82, 123, 255},
        {207, 68, 69, 255},
        {198, 99, 49, 255},
        {203, 159, 9, 255},
        {61, 157, 57, 255},
        {52, 60, 210, 255},
        {116, 65, 209, 255},
        {3, 184, 187, 255},
    ];

    // Initiate pickups
    pickups: [16] Pickup;
    pickup_spawner := PickupSpawner{pickups = pickups};

    // @Bug: There is something wrong with booleans initialization in the array currently so we set it explictly to false
    for i in 0..pickups.count {
        pickup := &pickups[i];
        pickup.is_shown = false;
    }
    
    // Initiate the bricks
    bricks: [BRICK_ROWS * BRICK_COLS] Brick;

    brick_row_width := (BRICK_WIDTH + BRICK_PADDING) * BRICK_COLS - 1;

    for row in 0..BRICK_ROWS {
        for col in 0..BRICK_COLS {
            index := row * BRICK_COLS + col;
            
            x := (BRICK_WIDTH + BRICK_PADDING)  * col + (WINDOW_WIDTH / 2) - (brick_row_width / 2);
            y := (BRICK_HEIGHT + BRICK_PADDING) * row + TOP_MARGIN;

            color := brick_colors[row];

            brick := Brick{
                x = x,
                y = y,
                color = color,
                dead = false,
            };

            bricks[index] = brick;
        }
    }

    // Math for bouncing the ball with the bar at a certain angle
    ANGLE_MIN := degree_to_radians(15.0);
    ANGLE_MAX := degree_to_radians(165.0);

    while !WindowShouldClose() {

        dt := GetFrameTime();

        //
        // Input
        //

        mouse_pos := GetMousePosition();

        bar.x = mouse_pos.x - bar.width * 0.5;

        if bar.x < 0 {
            bar.x = 0;
        }
        if bar.x > WINDOW_WIDTH - bar.width {
            bar.x = xx WINDOW_WIDTH - bar.width;
        }

        //
        // Hit detection
        //

        // Simulate the next ball position
        next_ball := ball;
        next_ball.x = ball.x + ball.vel_x * dt;
        next_ball.y = ball.y + ball.vel_y * dt;
        
        // Collisions ball and walls
        if next_ball.x < 0 || next_ball.x + next_ball.size > WINDOW_WIDTH {
            ball.vel_x = -ball.vel_x;
        }

        if next_ball.y < 0 || next_ball.y + next_ball.size > WINDOW_HEIGHT {
            ball.vel_y = -ball.vel_y;
        }

        // Collision ball and bar
        next_ball_rect := get_ball_rect(next_ball);
        bar_rect       := get_bar_rect(bar);

        if CheckCollisionRecs(next_ball_rect, bar_rect) {

            // The outbound angle of the ball when hitting the bar, follows that of a half circle.
            // If the ball hits the far left of the bar, the out angle is 20 degree
            // If the ball hits the far right of the bar, the out angle is 160 degree
            // Everything in between, we lerp between those two angles, hence, if the ball hits
            // the middle of the bar, the ball will go straight up in a 90 degree angle
            dx := next_ball_rect.x + next_ball_rect.width * 0.5 - bar_rect.x;

            t := dx / bar_rect.width;

            // Clamp t
            if t < 0 { t = 0; }
            if t > 1.0 { t = 1.0; }

            theta := lerp(ANGLE_MIN, ANGLE_MAX, t);

            direction_vector := Vector2{
                x = - xx cos(xx theta),
                y = - xx sin(xx theta),
            };

            speed := cast(f32) sqrt(ball.vel_x*ball.vel_x + ball.vel_y*ball.vel_y);

            ball.vel_x = direction_vector.x * speed;
            ball.vel_y = direction_vector.y * speed;
        }

        // Collision ball and bricks
        next_ball_rect = get_ball_rect(next_ball);
        
        for row in 0..BRICK_ROWS {
            for col in 0..BRICK_COLS {
                index := row * BRICK_COLS + col;
                brick := &bricks[index];

                if brick.dead { continue; } // mehhhh

                brick_rect := Rectangle{xx brick.x, xx brick.y, BRICK_WIDTH, BRICK_HEIGHT};
                if CheckCollisionRecs(next_ball_rect, brick_rect) {
                    bounce_ball(&ball, brick_rect);
                    brick.dead = true;
                    player.score += 100;

                    // Maybe spawn a pickup here
                    maybe_spawn_random_pickup(&pickup_spawner, {xx brick.x, xx brick.y});

                    break;
                }
            }
        }

        // Player pickup
        {
            bar_rect := get_bar_rect(bar);

            for i in 0..pickups.count {
                pickup := &pickups[i];
                if !pickup.is_shown { continue; }

                pickup_rect := Rectangle{pickup.x, pickup.y, PICKUP_SIZE, PICKUP_SIZE};

                if CheckCollisionRecs(bar_rect, pickup_rect) {
                    pickup.is_shown = false;
                }
            }
        }
        

        // Collision ball and dead zone
        

        // Ball updates
        ball.x += ball.vel_x * dt;
        ball.y += ball.vel_y * dt;

        update_pickups(pickups);


        //
        // Drawing
        //
        BeginDrawing();
        ClearBackground({ 30, 30, 30, 30 });

        // Draw pickups
        for i in 0..pickups.count {
            pickup := &pickups[i];

            if !(pickup.is_shown) { 
                continue; 
            }
            if !pickup {
                continue;
            }

            texture := pickup_textures[pickup.type];

            DrawRectangle(xx pickup.x, xx pickup.y, texture.width, texture.height, Color{50, 50, 50, 255});
            DrawTexture(texture, xx pickup.x, xx pickup.y, Color{255, 255, 255, 255});
        }
        
        // Draw bricks
        for b in bricks {
            if b.dead {
                continue;
            }

            BORDER_THICKNESS :: 3;
            border_color := b.color; 
            border_color.a = 170;

            border_rect := Rectangle{xx b.x, xx b.y, BRICK_WIDTH, BRICK_HEIGHT};

            DrawRectangle(b.x + BORDER_THICKNESS, b.y + BORDER_THICKNESS, BRICK_WIDTH - 2 * BORDER_THICKNESS, BRICK_HEIGHT - 2 * BORDER_THICKNESS, b.color);
            DrawRectangleLinesEx(border_rect, BORDER_THICKNESS, border_color);
        }

        // Draw the ball
        DrawRectangle(xx ball.x, xx ball.y, xx ball.size, xx ball.size, COLOR_WHITE);
        
        // Draw the bar
        DrawRectangle(xx bar.x, xx bar.y, xx bar.width, xx bar.height, COLOR_WHITE);

        DrawFPS(WINDOW_WIDTH - 100, 16);

        // Draw title
        // DrawText(game_title, xx (WINDOW_WIDTH * 0.5 - game_title_len * 0.5), 24, 24, COLOR_WHITE);
        
        // Draw lives
        for 0..player.lives {
            pad_x := 6.0;
            
            pos_x := cast(int) (10.0 + (heart_texture.width + pad_x) * it);

            DrawTexture(heart_texture, pos_x, 16, Color{255, 255, 255, 255});
        }

        // Draw score
        sprintf(score_text.data, xx "Score: %d", player.score);
        DrawText(xx score_text.data, 105, 16, 24, COLOR_WHITE);

        
        // DrawRectangleRec(dead_zone, {255, 0, 0, 30});

        EndDrawing();
    }

    UnloadTexture(heart_texture);

    for pickup_textures {
        UnloadTexture(it);
    }

    CloseWindow();
}

get_ball_rect :: (ball: Ball) -> Rectangle {
    return {
        x = ball.x,
        y = ball.y,
        width = ball.size,
        height = ball.size,
    };
}

get_bar_rect :: (bar: Bar) -> Rectangle {
    return {
        bar.x,
        bar.y,
        bar.width,
        bar.height,
    };
}

update_pickups :: (pickups: []Pickup) {
    dt := GetFrameTime();

    for i in 0..pickups.count {
        p := &pickups[i];

        if p.is_shown {
            p.y += p.vel_y * dt;
        }

        if p.y > WINDOW_HEIGHT {
            p.is_shown = false;
        }
    }
}

maybe_spawn_random_pickup :: (ps: *PickupSpawner, pos: Vector2) {

    r := GetRandomValue(0, 100);
    if !(r > 100 - PICKUP_SPAWN_CHANCE) {
        return;
    }

    pickup_type_index := GetRandomValue(0, xx PickupType.COUNT - 1);

    pickup := Pickup{
        type = cast(PickupType) pickup_type_index,
        x = pos.x,
        y = pos.y,
        vel_y = xx GetRandomValue(80, 120),
        is_shown = true,
    };

    // There is a @Bug here if we try to do ps.pickups[ps.free_index] @Crash
    free_slot := ps.free_index;
    ps.pickups[free_slot] = pickup;
    ps.free_index += 1;
}

bounce_ball :: (ball: *Ball, b: Rectangle) {

    overlap := Vector2{};
    a       := get_ball_rect(*ball);

    // Figure out how much we overlap with the rectangle
    if ball.vel_x > 0 {
        overlap.x = a.x + a.width - b.x; 
    } else {
        overlap.x = b.x + b.width - a.x; 
    }

    if ball.vel_y > 0 {
        overlap.y = a.y + a.height - b.y; 
    } else {
        overlap.y = b.y + b.height - a.y; 
    }

    // Adjust direction and position of the ball to make it unstuck
    if overlap.x < overlap.y {
        ball.vel_x = -ball.vel_x;
        ball.x    += overlap.x;
    } else {
        ball.vel_y = -ball.vel_y;
        ball.y    += overlap.y;
    }
}

degree_to_radians :: (deg: f32) -> f32 {
    return deg * (PI / 180.0);
}

lerp :: (a: f32, b: f32, t: f32) -> f32 {
    return a + (b - a) * t;
}