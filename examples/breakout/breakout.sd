//////////////////////////////////////////////////////////////////////////////////////
//  Raylib library functions
//////////////////////////////////////////////////////////////////////////////////////

Color :: struct {
    r: u8;
    g: u8;
    b: u8;
    a: u8;
}

Rectangle :: struct {
    x: float;
    y: float;
    width: float;
    height: float;
}

KeyboardKey :: enum {
    NULL            = 0,        // Key: NULL, used for no key pressed
    // Alphanumeric keys
    APOSTROPHE      = 39,       // Key: '
    COMMA           = 44,       // Key: ,
    MINUS           = 45,       // Key: -
    PERIOD          = 46,       // Key: .
    SLASH           = 47,       // Key: /
    ZERO            = 48,       // Key: 0
    ONE             = 49,       // Key: 1
    TWO             = 50,       // Key: 2
    THREE           = 51,       // Key: 3
    FOUR            = 52,       // Key: 4
    FIVE            = 53,       // Key: 5
    SIX             = 54,       // Key: 6
    SEVEN           = 55,       // Key: 7
    EIGHT           = 56,       // Key: 8
    NINE            = 57,       // Key: 9
    SEMICOLON       = 59,       // Key: ;
    EQUAL           = 61,       // Key: =
    A               = 65,       // Key: A | a
    B               = 66,       // Key: B | b
    C               = 67,       // Key: C | c
    D               = 68,       // Key: D | d
    E               = 69,       // Key: E | e
    F               = 70,       // Key: F | f
    G               = 71,       // Key: G | g
    H               = 72,       // Key: H | h
    I               = 73,       // Key: I | i
    J               = 74,       // Key: J | j
    K               = 75,       // Key: K | k
    L               = 76,       // Key: L | l
    M               = 77,       // Key: M | m
    N               = 78,       // Key: N | n
    O               = 79,       // Key: O | o
    P               = 80,       // Key: P | p
    Q               = 81,       // Key: Q | q
    R               = 82,       // Key: R | r
    S               = 83,       // Key: S | s
    T               = 84,       // Key: T | t
    U               = 85,       // Key: U | u
    V               = 86,       // Key: V | v
    W               = 87,       // Key: W | w
    X               = 88,       // Key: X | x
    Y               = 89,       // Key: Y | y
    Z               = 90,       // Key: Z | z
    LEFT_BRACKET    = 91,       // Key: [
    BACKSLASH       = 92,       // Key: '\'
    RIGHT_BRACKET   = 93,       // Key: ]
    GRAVE           = 96,       // Key: `
    // Function keys
    SPACE           = 32,       // Key: Space
    ESCAPE          = 256,      // Key: Esc
    ENTER           = 257,      // Key: Enter
    TAB             = 258,      // Key: Tab
    BACKSPACE       = 259,      // Key: Backspace
    INSERT          = 260,      // Key: Ins
    DELETE          = 261,      // Key: Del
    RIGHT           = 262,      // Key: Cursor right
    LEFT            = 263,      // Key: Cursor left
    DOWN            = 264,      // Key: Cursor down
    UP              = 265,      // Key: Cursor up
    PAGE_UP         = 266,      // Key: Page up
    PAGE_DOWN       = 267,      // Key: Page down
    HOME            = 268,      // Key: Home
    END             = 269,      // Key: End
    CAPS_LOCK       = 280,      // Key: Caps lock
    SCROLL_LOCK     = 281,      // Key: Scroll down
    NUM_LOCK        = 282,      // Key: Num lock
    PRINT_SCREEN    = 283,      // Key: Print screen
    PAUSE           = 284,      // Key: Pause
    F1              = 290,      // Key: F1
    F2              = 291,      // Key: F2
    F3              = 292,      // Key: F3
    F4              = 293,      // Key: F4
    F5              = 294,      // Key: F5
    F6              = 295,      // Key: F6
    F7              = 296,      // Key: F7
    F8              = 297,      // Key: F8
    F9              = 298,      // Key: F9
    F10             = 299,      // Key: F10
    F11             = 300,      // Key: F11
    F12             = 301,      // Key: F12
    LEFT_SHIFT      = 340,      // Key: Shift left
    LEFT_CONTROL    = 341,      // Key: Control left
    LEFT_ALT        = 342,      // Key: Alt left
    LEFT_SUPER      = 343,      // Key: Super left
    RIGHT_SHIFT     = 344,      // Key: Shift right
    RIGHT_CONTROL   = 345,      // Key: Control right
    RIGHT_ALT       = 346,      // Key: Alt right
    RIGHT_SUPER     = 347,      // Key: Super right
    KB_MENU         = 348,      // Key: KB menu
    // Keypad keys
    KP_0            = 320,      // Key: Keypad 0
    KP_1            = 321,      // Key: Keypad 1
    KP_2            = 322,      // Key: Keypad 2
    KP_3            = 323,      // Key: Keypad 3
    KP_4            = 324,      // Key: Keypad 4
    KP_5            = 325,      // Key: Keypad 5
    KP_6            = 326,      // Key: Keypad 6
    KP_7            = 327,      // Key: Keypad 7
    KP_8            = 328,      // Key: Keypad 8
    KP_9            = 329,      // Key: Keypad 9
    KP_DECIMAL      = 330,      // Key: Keypad .
    KP_DIVIDE       = 331,      // Key: Keypad /
    KP_MULTIPLY     = 332,      // Key: Keypad *
    KP_SUBTRACT     = 333,      // Key: Keypad -
    KP_ADD          = 334,      // Key: Keypad +
    KP_ENTER        = 335,      // Key: Keypad Enter
    KP_EQUAL        = 336,      // Key: Keypad =
}

// Window-related functions
InitWindow        :: (width: int, height: int, title: string) #extern "C"
CloseWindow       :: () #extern "C"
WindowShouldClose :: () -> bool #extern "C"
BeginDrawing      :: () #extern "C"
EndDrawing        :: () #extern "C"
ClearBackground   :: (color: Color) #extern "C"

// Text drawing functions
DrawFPS  :: (posX: int, posY: int) #extern "C"                                                  // Draw current FPS
DrawText :: (text: string, posX: int, posY: int, fontSize: int, color: Color) #extern "C"       // Draw text (using default font)
// DrawTextEx :: (Font font, const char *text, Vector2 position, float fontSize, float spacing, Color tint); // Draw text using font and additional parameters
// DrawTextPro :: (Font font, const char *text, Vector2 position, Vector2 origin, float rotation, float fontSize, float spacing, Color tint); // Draw text using Font and pro parameters (rotation)
// DrawTextCodepoint :: (Font font, int codepoint, Vector2 position, float fontSize, Color tint); // Draw one character (codepoint)
// DrawTextCodepoints :: (Font font, const int *codepoints, int count, Vector2 position, float fontSize, float spacing, Color tint); // Draw multiple character (codepoint)

// Basic shapes drawing functions
DrawCircle    :: (centerX: int, centerY: int, radius: float, color: Color) #extern "C"
DrawRectangle :: (posX: int, posY: int, width: int, height: int, color: Color) #extern "C"

// Text font info functions
MeasureText :: (text: string, fontSize: int) -> int #extern "C"

// Timing-related functions
SetTargetFPS :: (fps: int) #extern "C"
GetFrameTime :: () -> f32 #extern "C"
GetTime      :: () -> f64 #extern "C"

// Input-related functions: keyboard
IsKeyPressed  :: (key: KeyboardKey) -> bool #extern "C"
IsKeyDown     :: (key: KeyboardKey) -> bool #extern "C"
GetKeyPressed :: () -> KeyboardKey #extern "C"

//////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////
//  C math.h functions
//////////////////////////////////////////////////////////////////////////////////////
round :: (value: f64) -> f64 #extern "C"


//////////////////////////////////////////////////////////////////////////////////////

BALL_SIZE :: 20;

Brick :: struct {
    x:     int;
    y:     int;
    color: Color;
    dead:  bool;
}

BRICK_WIDTH  :: 80;
BRICK_HEIGHT :: 20;
BRICK_PADDING :: 15;

BRICK_ROWS :: 8;
BRICK_COLS :: 11;

TOP_MARGIN :: 80;

main :: () {

    COLOR_WHITE := Color{255, 255, 255, 255};

    window_width := 1200;
    window_height := 800;

    InitWindow(window_width, window_height, "Super Breakout");

    SetTargetFPS(120);

    text := "Super Breakout";
    text_len := MeasureText(text, 24);

    ball_x     := window_width * 0.5;
    ball_y     := window_height * 0.5;
    ball_vel_x := 400.0;
    ball_vel_y := 400.0;
    ball_size  := 20;

    bar_width  := 160.0;
    bar_height := 15.0;
    bar_x := window_width * 0.5 - bar_width * 0.5;
    bar_y := window_height - 60.0;
    bar_vel := 0.0;
    bar_speed := 400.0;

    bricks : [BRICK_ROWS * BRICK_COLS] Brick;

    // Initiate the bricks
    brick_row_width := (BRICK_WIDTH + BRICK_PADDING) * BRICK_COLS - 1;
    for row in 0..BRICK_ROWS {
        for col in 0..BRICK_COLS {
            index := row * BRICK_COLS + col;
            
            x := (BRICK_WIDTH + BRICK_PADDING)  * col + (window_width / 2) - (brick_row_width / 2);
            y := (BRICK_HEIGHT + BRICK_PADDING) * row + TOP_MARGIN;

            color := Color{33, 186, 10, 255};

            brick := Brick{
                x = x,
                y = y,
                color = color,
                dead = false,
            };

            bricks[index] = brick;
        }
    }

    while !WindowShouldClose() {

        dt := GetFrameTime();

        // Input
        bar_vel = 0.0;

        if IsKeyDown(.A) || IsKeyDown(.LEFT) {
            bar_vel -= bar_speed;
        }
        if IsKeyDown(.D) || IsKeyDown(.RIGHT) {
            bar_vel += bar_speed;
        }

        // Simulate the next ball and bar position
        new_ball_x := ball_x + ball_vel_x * dt;
        new_ball_y := ball_y + ball_vel_y * dt;
        new_bar_x  := bar_x + bar_vel * dt;

        // Collisions ball and walls
        if new_ball_x < 0 || new_ball_x + ball_size > window_width {
            ball_vel_x = -ball_vel_x;
        }

        if new_ball_y < 0 || new_ball_y + ball_size > window_height {
            ball_vel_y = -ball_vel_y;
        }

        // Collision ball and bar
        if (new_ball_x + ball_size >= new_bar_x && new_ball_x <= new_bar_x + bar_width) && (new_ball_y + ball_size >= bar_y && new_ball_y <= bar_y + bar_height) {

            // Determine which way the ball should go based on how much its stuck
            // within the bar
            stuck_x := new_ball_x + ball_size - new_bar_x;
            stuck_y := new_ball_y + ball_size - bar_y;

            if stuck_x > stuck_y {
                ball_vel_y = -ball_vel_y;
            } else {
                ball_vel_x = -ball_vel_x;
            }
        }

        // Collision bar and walls
        if new_bar_x < 0 || new_bar_x + bar_width > window_width {
            bar_vel = 0;
        }

        // Do position updates
        ball_x += ball_vel_x * dt;
        ball_y += ball_vel_y * dt;

        bar_x  += bar_vel * dt;


        //
        // Drawing
        //
        BeginDrawing();
        ClearBackground({ 30, 30, 30, 30 });
        
        // Draw bricks
        for b in bricks {
            DrawRectangle(b.x, b.y, BRICK_WIDTH, BRICK_HEIGHT, b.color);
        }

        // Draw the ball
        DrawRectangle(xx ball_x, xx ball_y, xx ball_size, xx ball_size, COLOR_WHITE);
        
        // Draw the bar
        DrawRectangle(xx bar_x, xx bar_y, xx bar_width, xx bar_height, COLOR_WHITE);

        DrawFPS(window_width - 100, 16);
        DrawText(text, xx (window_width * 0.5 - text_len * 0.5), 24, 24, COLOR_WHITE);

        EndDrawing();
    }

    CloseWindow();
}