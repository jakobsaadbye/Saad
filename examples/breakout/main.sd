Color :: struct {
    r: u8;
    g: u8;
    b: u8;
    a: u8;
}

// Window-related functions
InitWindow        :: (width: int, height: int, title: string) #extern "C"
CloseWindow       :: () #extern "C"
WindowShouldClose :: () -> bool #extern "C"
SetTargetFPS      :: (fps: int) #extern "C"
BeginDrawing      :: () #extern "C"
EndDrawing        :: () #extern "C"
ClearBackground   :: (color: Color) #extern "C"

// Text drawing functions
DrawFPS  :: (posX: int, posY: int) #extern "C"                                                  // Draw current FPS
DrawText :: (text: string, posX: int, posY: int, fontSize: int, color: Color) #extern "C"       // Draw text (using default font)
// DrawTextEx :: (Font font, const char *text, Vector2 position, float fontSize, float spacing, Color tint); // Draw text using font and additional parameters
// DrawTextPro :: (Font font, const char *text, Vector2 position, Vector2 origin, float rotation, float fontSize, float spacing, Color tint); // Draw text using Font and pro parameters (rotation)
// DrawTextCodepoint :: (Font font, int codepoint, Vector2 position, float fontSize, Color tint); // Draw one character (codepoint)
// DrawTextCodepoints :: (Font font, const int *codepoints, int count, Vector2 position, float fontSize, float spacing, Color tint); // Draw multiple character (codepoint)

// Basic shapes drawing functions
DrawCircle    :: (centerX: int, centerY: int, radius: float, color: Color) #extern "C"
DrawRectangle :: (posX: int, posY: int, width: int, height: int, color: Color) #extern "C"

// Text font info functions
MeasureText :: (text: string, fontSize: int) -> int #extern "C"

BALL_SIZE :: 24;

main :: () {
    window_width := 1200;
    window_height := 800;
    InitWindow(window_width, window_height, "Super Breakout");

    SetTargetFPS(120);

    text := "Super Breakout";
    text_len := MeasureText(text, 24);

    ball_x    := window_width * 0.5;
    ball_y    := window_height * 0.5;
    ball_vel_x  := 4.0;
    ball_vel_y  := 4.0;

    while !WindowShouldClose() {

        new_x := ball_x + ball_vel_x;
        new_y := ball_y + ball_vel_y;

        if (new_x < 0 || new_x > window_width) {
            ball_vel_x = -1.0 * ball_vel_x;
        }

        if (new_y < 0 || new_y > window_height) {
            ball_vel_y = -1.0 * ball_vel_y;
        }

        ball_x += ball_vel_x;
        ball_y += ball_vel_y;


        BeginDrawing();
        ClearBackground({ 30, 30, 30, 30 });
        DrawText(text, xx (window_width * 0.5 - text_len * 0.5), 24, 24, {255, 255, 255, 255});

        // Draw the ball
        DrawRectangle(xx ball_x, xx ball_y, BALL_SIZE, BALL_SIZE, {255, 255, 255, 255});

        EndDrawing();
    }

    CloseWindow();
}