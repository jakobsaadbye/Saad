// Enums work mostly as they do in C.
// They are mostly treated as integers and we don't go out of our way to check
// that values assigned to enums are one of its options

CardValue :: enum {
    joker = 0,
    ace,        // 'ace' will have value 1
    two,
    three,
    four,
    five,
    six,
    seven,
    eight,
    nine,
    ten,
    jack,
    queen,
    king,

    count
}

CardSuit :: enum {
    joker = 0,
    diamonds,
    clubs,
    hearts = 3,
    spades = 4,

    // also_joker = .joker, // All enum members must have unique values, so this will fail if you uncomment it

    count
}

main :: () {
    // Enums default initialzes to 0 regardless of what the first member is
    v : CardValue;
    print("%", v); // Will print '.joker'

    // Enum members can be referenced using .<enum_name> if the enum can be inferred from the context. In this case from the left-hand-side of the assignment
    v = .ten;
    // The above is the same as saying
    v = CardValue.ten;

    // Unlike C, enums needs to be explicitly casted to an integer before it can be treated as such
    v = xx (cast(int)v + 1);
    print("%", v); // .jack
    
    // Also means we can assign values not in range of the enum
    v = xx 99;
    print("%", v); // Will just print '99'
}